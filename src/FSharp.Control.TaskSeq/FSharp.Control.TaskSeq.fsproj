<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.1</TargetFramework>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <ApplicationIcon>..\..\assets\TaskSeq.ico</ApplicationIcon>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <Title>Computation expression 'taskSeq' for processing IAsyncEnumerable sequences and module functions</Title>
    <Version>$(Version)</Version>
    <Authors>Abel Braaksma; Don Syme</Authors>
    <Description>This library brings C#'s concept of 'await foreach' to F#, with a seamless implementation of IAsyncEnumerable&lt;'T&gt;.

The 'taskSeq' computation expression adds support for awaitable asyncronous sequences with a similar ease of use and performance as F#'s 'task' CE, with minimal overhead through ValueTask under the hood. TaskSeq brings 'seq' and 'task' together in a safe way.

Generates optimized IL code through the new resumable state machines, and comes with a comprehensive set of helpful functions in module 'TaskSeq'. See README for documentation and more info.</Description>
    <Copyright>Copyright 2022</Copyright>
    <PackageProjectUrl>https://github.com/fsprojects/FSharp.Control.TaskSeq</PackageProjectUrl>
    <RepositoryUrl>https://github.com/fsprojects/FSharp.Control.TaskSeq</RepositoryUrl>
    <PackageIcon>taskseq-icon.png</PackageIcon>
    <PackageOutputPath>..\..\packages</PackageOutputPath>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>False</PackageRequireLicenseAcceptance>
    <PackageReadmeFile>nuget-package-readme.md</PackageReadmeFile>
    <PackageReleaseNotes>
      Release notes:
      0.2.3
       - do not throw exception for unequal lengths in TaskSeq.zip, fixes #32
      0.2.2
       - removes TaskSeq.toSeqCachedAsync, which was incorrectly named. Use toSeq or toListAsync instead.
       - renames TaskSeq.toSeqCached to TaskSeq.toSeq, which was its actual operational behavior.
      0.2.1
       - fixes an issue with ValueTask on completed iterations.
       - adds `TaskSeq.except` and `TaskSeq.exceptOfSeq` async set operations.
      0.2
       - moved from NET 6.0, to NetStandard 2.1 for greater compatibility, no functional changes.
       - move to minimally necessary FSharp.Core version: 6.0.2.
       - updated readme with progress overview, corrected meta info, added release notes.
      0.1.1
       - updated meta info in nuget package and added readme.
      0.1
       - initial release
       - implements taskSeq CE using resumable state machines
          - with support for: yield, yield!, let, let!, while, for, try-with, try-finally, use, use!
          - and: tasks and valuetasks
       - adds toXXX / ofXXX functions
       - adds map/mapi/fold/iter/iteri/collect etc with async variants
       - adds find/pick/choose/filter etc with async variants and 'try' variants
       - adds cast/concat/append/prepend/delay/exactlyOne
       - adds empty/isEmpty
       - adds findIndex/indexed/init/initInfinite
       - adds head/last/tryHead/tryLast/tail/tryTail
       - adds zip/length
       
    </PackageReleaseNotes>
    <PackageTags>taskseq'fsharp;f#;computation expression;IAsyncEnumerable;task;async;asyncseq;</PackageTags>
    <IncludeSymbols>True</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="..\..\assets\TaskSeq.ico" Link="TaskSeq.ico" />
    <None Include="..\..\assets\taskseq-icon.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Include="..\..\assets\nuget-package-readme.md" Pack="true" PackagePath="" />
    <Compile Include="Utils.fs" />
    <Compile Include="TaskSeqBuilder.fs" />
    <Compile Include="TaskSeqInternal.fs" />
    <Compile Include="TaskSeq.fsi" />
    <Compile Include="TaskSeq.fs" />
  </ItemGroup>

  <ItemGroup />


  <ItemGroup />

  <ItemGroup>
    <!-- maximal compatibility with minimal required FSharp.Core version for TaskSeq -->
    <PackageReference Update="FSharp.Core" Version="6.0.2" />
  </ItemGroup>
</Project>
